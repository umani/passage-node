/* tslint:disable */
/* eslint-disable */
/**
 * Passage Management API
 * Passage\'s management API to manage your Passage apps and users.
 *
 * The version of the OpenAPI document: 1
 * Contact: support@passage.id
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { RequiredError, BaseAPI, HTTPHeaders, JSONApiResponse, InitOverrideFunction, ApiResponse } from '../runtime.js';
import { type CreateMagicLinkRequest, CreateMagicLinkRequestToJSON } from '../models/CreateMagicLinkRequest.js';
import { type MagicLinkResponse, MagicLinkResponseFromJSON } from '../models/MagicLinkResponse.js';

export interface CreateMagicLinkOperationRequest {
    appId: string;
    createMagicLinkRequest: CreateMagicLinkRequest;
}

/**
 * 
 */
export class MagicLinksApi extends BaseAPI {

    /**
     * Create magic link for a user.
     * Create Embeddable Magic Link
     */
    async createMagicLinkRaw(requestParameters: CreateMagicLinkOperationRequest, initOverrides?: RequestInit | InitOverrideFunction): Promise<ApiResponse<MagicLinkResponse>> {
        if (requestParameters.appId === null || requestParameters.appId === undefined) {
            throw new RequiredError('appId','Required parameter requestParameters.appId was null or undefined when calling createMagicLink.');
        }

        if (requestParameters.createMagicLinkRequest === null || requestParameters.createMagicLinkRequest === undefined) {
            throw new RequiredError('createMagicLinkRequest','Required parameter requestParameters.createMagicLinkRequest was null or undefined when calling createMagicLink.');
        }

        const queryParameters: any = {};

        const headerParameters: HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/apps/{app_id}/magic-links`.replace(`{${"app_id"}}`, encodeURIComponent(String(requestParameters.appId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateMagicLinkRequestToJSON(requestParameters.createMagicLinkRequest),
        }, initOverrides);

        return new JSONApiResponse(response, (jsonValue) => MagicLinkResponseFromJSON(jsonValue));
    }

    /**
     * Create magic link for a user.
     * Create Embeddable Magic Link
     */
    async createMagicLink(requestParameters: CreateMagicLinkOperationRequest, initOverrides?: RequestInit | InitOverrideFunction): Promise<MagicLinkResponse> {
        const response = await this.createMagicLinkRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
